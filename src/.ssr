/* Analyzed bindings: {
  "valorInvestimento": "data",
  "tempoInvestimento": "data",
  "tempos": "data",
  "opcaoCall": "data",
  "opcaoPut": "data",
  "strikePrice": "data",
  "dataExercicio": "data",
  "simularInvestimento": "options"
} */

import { ref } from "vue";

const __sfc__ = {
  data() {
    return {
      valorInvestimento: "",
      tempoInvestimento: null,
      tempos: [
        { text: "6 meses", value: 6, opcaoCallDivider: 0.016, strikePrice: 0.03 },
        { text: "12 meses", value: 12, opcaoCallDivider: 0.022, strikePrice: 0.06 },
        { text: "18 meses", value: 18, opcaoCallDivider: 0.028, strikePrice: 0.10 },
        { text: "24 meses", value: 24, opcaoCallDivider: 0.051, strikePrice: 0.35 },
        { text: "36 meses", value: 36, opcaoCallDivider: 0.061, strikePrice: 0.60 },
        { text: "60 meses", value: 60, opcaoCallDivider: 0.064, strikePrice: 1.00 },
      ],
      opcaoCall: null,
      opcaoPut: null,
      strikePrice: null,
      dataExercicio: null,
      
    };
  },
  methods: {
    simularInvestimento() {
      if (!this.valorInvestimento || !this.tempoInvestimento) {
        alert("Por favor, insira o valor do investimento e escolha o tempo de investimento.");
        return;
      }

      const selectedTempo = this.tempos.find((tempo) => tempo.value === this.tempoInvestimento);
      if (!selectedTempo) {
        alert("Tempo de investimento inválido.");
        return;
      }

      const strikePrice = selectedTempo.strikePrice;
      const currentDate = new Date();
      const dataExercicio = new Date(currentDate);
      dataExercicio.setMonth(dataExercicio.getMonth() + selectedTempo.value);

      this.opcaoCall = (this.valorInvestimento / selectedTempo.opcaoCallDivider).toFixed(2);
      this.opcaoPut = (this.opcaoCall * strikePrice).toFixed(2);
      this.strikePrice = strikePrice.toFixed(2);
      this.dataExercicio = dataExercicio.toLocaleDateString("pt-BR").slice(0, 10); // Format as DD-MM-YYYY
    },
  },
};
;
import { mergeProps as _mergeProps } from "vue"
import { ssrRenderAttr as _ssrRenderAttr, ssrRenderAttrs as _ssrRenderAttrs, ssrInterpolate as _ssrInterpolate, ssrRenderList as _ssrRenderList } from "vue/server-renderer"
function ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${
    _ssrRenderAttrs(_mergeProps({ class: "app-container" }, _attrs))
  }><h1 class="display-3 text-center my-5">Simulador de Investimentos Opções Equals9 </h1><div class="row"><div class="col-md-6"><input${
    _ssrRenderAttr("value", $data.valorInvestimento)
  } type="number" class="input-box" placeholder="Valor do Investimento em R\$"></div><div class="col-md-6"><select class="input-box"><!--[-->`)
  _ssrRenderList($data.tempos, (tempo) => {
    _push(`<option${
      _ssrRenderAttr("value", tempo.value)
    }>${
      _ssrInterpolate(tempo.text)
    }</option>`)
  })
  _push(`<!--]--></select></div></div><button class="btn-simular">Simular</button><hr class="my-5">`)
  if ($data.opcaoCall) {
    _push(`<div><h3 class="text-center">Preço de exercício da EQ9:</h3><p class="text-center">R\$ ${
      _ssrInterpolate($data.strikePrice)
    }</p><h3 class="text-center">Data de Exercício:</h3><p class="text-center">${
      _ssrInterpolate($data.dataExercicio)
    }</p><h3 class="text-center">Opção de Venda - Valores em R\$:</h3><p class="text-center">R\$ ${
      _ssrInterpolate($data.opcaoPut)
    }</p></div>`)
  } else {
    _push(`<!---->`)
  }
  if ($data.opcaoPut !== null) {
    _push(`<div><h3 class="text-center">Opção de Compra - Valores em EQ9:</h3><p class="text-center">Tokens: ${_ssrInterpolate($data.opcaoCall)} EQ9</p></div>`)
  } else {
    _push(`<!---->`)
  }
  _push(`</div>`)
}
__sfc__.ssrRender = ssrRender
__sfc__.__file = "src/App.vue"
export default __sfc__